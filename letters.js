var langs = ["Tamil", "Telugu", "Kannada", "Bengali", "Hindi", "Punjabi", "Malayalam", "Gujarati", "Sinhala"]//, "Oriya"];
var currentLang = 8
var vowelLetterLangs = [['роЕ', 'роЖ', 'роЗ', 'роИ', 'роЙ', 'роК', 'роО', 'роП', 'роР', 'роТ', 'роУ', 'роФ', 'роГ'],
['р░Е', 'р░Ж', 'р░З', 'р░И', 'р░Й', 'р░К', 'р░Л', 'р▒а', 'р░М', 'р▒б', 'р░О', 'р░П', 'р░Р', 'р░Т', 'р░У', 'р░Ф', 'р░Ер░Б', 'р░Ер░В', 'р░Ер░Г', 'тАФ'],
['р▓Е', 'р▓Ж', 'р▓З', 'р▓И', 'р▓Й', 'р▓К', 'р▓Л', 'р│а', 'р▓О', 'р▓П', 'р▓Р', 'р▓Т', 'р▓У', 'р▓Ф', 'р▓Ер▓В', 'р▓Ер▓Г', 'тАФ'],
['ржЕ', 'ржЖ', 'ржЗ', 'ржИ', 'ржЙ', 'ржК', 'ржЛ', 'рза', 'ржМ', 'рзб', 'ржП', 'ржР', 'ржУ', 'ржФ'],
['рдЕ', 'рдЖ', 'рдЗ', 'рдИ', 'рдЙ', 'рдК', 'рдП', 'рдР', 'рдУ', 'рдФ', 'рдЕрдВ', 'рдЕрдГ'],
['риЕ', 'риЖ', 'риЗ', 'риИ', 'риЙ', 'риК', 'риП', 'риР', 'риУ', 'риФ'],
['р┤Е','р┤Ж','р┤З','р┤И','р┤Й','р┤К','р┤Л','р╡а','р┤М','р╡б','р┤О','р┤П','р┤Р','р┤Т','р┤У','р┤Ф','р┤Ер┤В','р┤Ер┤Г'],
['ркЕ','ркЖ','ркЗ','ркИ','ркЙ','ркК','ркЛ','рла','ркМ','рлб','ркП','ркН','ркР','ркУ','ркС','ркФ','ркЕркБ','ркЕркВ','ркЕркГ'],
['р╢Е','р╢Ж','р╢З','р╢И','р╢Й','р╢К','р╢Л','р╢М','р╢С','р╢Т','р╢У','р╢Ф','р╢Х','р╢Ц','р╢Н','р╢О','р╢П','р╢Р','р╢Ер╢В','р╢Ер╢Г'],
//['рмЕ', 'рмЖ', 'рмЗ', 'рмИ', 'рмЙ', 'рмК', 'рмЛ', 'рна', 'рмМ', 'рнб', 'рмП', 'рмР', 'рмУ', 'ржФ']
]
var vowelSignLangs = [['', 'ро╛', 'ро┐', 'рпА', 'рпБ', 'рпВ', 'рпЖ', 'рпЗ', 'рпИ', 'рпК', 'рпЛ', 'рпМ', 'роВ'],
['', 'р░╛', 'р░┐', 'р▒А', 'р▒Б', 'р▒В', 'р▒Г', 'р▒Д', 'р▒в', 'р▒г', 'р▒Ж', 'р▒З', 'р▒И', 'р▒К', 'р▒Л', 'р▒М', 'р░Б', 'р░В', 'р░Г', 'р▒Х'],
['', 'р▓╛', 'р▓┐', 'р│А', 'р│Б', 'р│В', 'р│Г', 'р│Д', 'р│Ж', 'р│З', 'р│И', 'р│К', 'р│Л', 'р│М', 'р▓В', 'р▓Г', 'р│Х'],
['', 'рж╛', 'рж┐', 'рзА', 'рзБ', 'рзВ', 'рзГ', 'рзД', 'рзв', 'рзг', 'рзЗ', 'рзИ', 'рзЛ', 'рзМ'],
['', 'рд╛', 'рд┐', 'реА', 'реБ', 'реВ', 'реЗ', 'реИ', 'реЛ', 'реМ', 'рдВ', 'рдГ'],
['', 'ри╛', 'ри┐', 'рйА', 'рйБ', 'рйВ', 'рйЗ', 'рйИ', 'рйЛ', 'рйМ'],
['','р┤╛','р┤┐','р╡А','р╡Б','р╡В','р╡Г','р╡Д','р╡в','р╡г','р╡Ж','р╡З','р╡И','р╡К','р╡Л','р╡М','р┤В','р┤Г'],
['','рк╛','рк┐','рлА','рлБ','рлВ','рлГ','рлД','рлв','рлг','рлЗ','рлЕ','рлИ','рлЛ','рлЙ','рлМ','ркБ','ркВ','ркГ',],
['','р╖П','р╖Р','р╖С','р╖Т','р╖У','р╖Ф','р╖Ц','р╖Щ','р╖Ъ','р╖Ы','р╖Ь','р╖Э','р╖Ю','р╖Ш','р╖▓','р╖Я','р╖│','р╢В','р╢Г'],
//['', 'рм╛', 'рм┐', 'рнА', 'рнБ', 'рнВ', 'рнГ', 'рнД', 'рнв', 'рнг', 'рнЗ', 'рнИ', 'рнЛ', 'рнМ']
]
var consonantLangs = [['роХ', 'роЩ', 'роЪ', 'роЮ', 'роЯ', 'рог', 'род', 'рои', 'рок', 'роо', 'роп', 'ро░', 'ро▓', 'ро╡', 'ро┤', 'ро│', 'ро▒', 'рой'],
['р░Х', 'р░Ц', 'р░Ч', 'р░Ш', 'р░Щ', 'р░Ъ', 'р░Ы', 'р░Ь', 'р░Э', 'р░Ю', 'р░Я', 'р░а', 'р░б', 'р░в', 'р░г', 'р░д', 'р░е', 'р░ж', 'р░з', 'р░и', 'р░к', 'р░л', 'р░м', 'р░н', 'р░о', 'р░п', 'р░░', 'р░▓', 'р░╡', 'р░╢', 'р░╖', 'р░╕', 'р░╣', 'р░│', 'р░Хр▒Нр░╖', 'р░▒'],
['р▓Х', 'р▓Ц', 'р▓Ч', 'р▓Ш', 'р▓Щ', 'р▓Ъ', 'р▓Ы', 'р▓Ь', 'р▓Э', 'р▓Ю', 'р▓Я', 'р▓а', 'р▓б', 'р▓в', 'р▓г', 'р▓д', 'р▓е', 'р▓ж', 'р▓з', 'р▓и', 'р▓к', 'р▓л', 'р▓м', 'р▓н', 'р▓о', 'р▓п', 'р▓░', 'р▓▒', 'р▓▓', 'р▓╡', 'р▓╢', 'р▓╖', 'р▓╕', 'р▓╣', 'р▓│', 'р│Ю'],
['ржХ', 'ржЦ', 'ржЧ', 'ржШ', 'ржЩ', 'ржЪ', 'ржЫ', 'ЁСТХ', 'ржЬ', 'ржЭ', 'ЁСТЧ', 'ржЮ', 'ржЯ', 'ЁСТЩ', 'ржа', 'ржб', 'ржбрж╝', 'ржв', 'ржврж╝', 'ржг', 'ржд', 'рже', 'ржж', 'ржз', 'ржи', 'ржк', 'ржл', 'ЁСТд', 'ржм', 'ржн', 'ржо', 'ржп', 'ржпрж╝', 'рж░', 'рз░', 'рж▓', 'ЁСТк', 'рз▒', 'рж╢', 'рж╖', 'рж╕', 'рж╣'],
['рдХ', 'рдЦ', 'рдЧ', 'рдШ', 'рдЩ', 'рдЪ', 'рдЫ', 'рдЬ', 'рдЭ', 'рдЮ', 'рдЯ', 'рда', 'рдб', 'рдв', 'рдг', 'рдд', 'рде', 'рдж', 'рдз', 'рди', 'рдк', 'рдл', 'рдм', 'рдн', 'рдо', 'рдп', 'рд░', 'рд▓', 'рд╡', 'рд╢', 'рд╖', 'рд╕', 'рд╣'],
['риХ', 'риЦ', 'риЧ', 'риШ', 'риЩ', 'риЪ', 'риЫ', 'риЬ', 'риЭ', 'риЮ', 'риЯ', 'риа', 'риб', 'рив', 'риг', 'рид', 'рие', 'риж', 'риз', 'рии', 'рик', 'рил', 'рим', 'рин', 'рио', 'рип', 'ри░', 'ри▓', 'ри│', 'ри╡', 'ри╢', 'ри╕', 'ри╣', 'рйЩ', 'рйЪ', 'рйЫ', 'рйЬ', 'рйЮ'],
['р┤Х', 'р┤Ц', 'р┤Ч', 'р┤Ш', 'р┤Щ', 'р┤Ъ', 'р┤Ы', 'р┤Ь', 'р┤Э', 'р┤Ю', 'р┤Я', 'р┤а', 'р┤б', 'р┤в', 'р┤г', 'р┤д', 'р┤е', 'р┤ж', 'р┤з', 'р┤и', 'р┤к', 'р┤л', 'р┤м', 'р┤н', 'р┤о', 'р┤п', 'р┤░', 'р┤▓', 'р┤╡', 'р┤╢', 'р┤╖', 'р┤╕', 'р┤╣', 'р┤│', 'р┤┤', 'р┤▒'],
['ркХ', 'ркЦ', 'ркЧ', 'ркШ', 'ркЩ', 'ркЪ', 'ркЫ', 'ркЬ', 'ркЭ', 'ркЮ', 'ркЯ', 'рка', 'ркб', 'ркв', 'ркг', 'ркд', 'рке', 'ркж', 'ркз', 'рки', 'ркк', 'ркл', 'ркм', 'ркн', 'рко', 'ркп', 'рк░', 'рк▓', 'рк│', 'рк╡', 'рк╢', 'рк╖', 'рк╕', 'рк╣', 'рк│'],
['р╢Ъ','р╢Ы','р╢Ь','р╢Э','р╢Ю','р╢Я','р╢а','р╢б','р╢в','р╢г','р╢д','р╢е','р╢ж','р╢з','р╢и','р╢й','р╢к','р╢л','р╢м','р╢н','р╢о','р╢п','р╢░','р╢▒','р╢│','р╢┤','р╢╡','р╢╢','р╢╖','р╢╕','р╢╣','р╢║','р╢╗','р╢╜','р╖Е','р╖А','р╖Д','р╖Б','р╖В','р╖Г','р╖Ж'],
//['рмХрнН', 'рмЦрнН', 'рмЧрнН', 'рмШрнН', 'рмЩрнН', 'рмЪрнН', 'рмЫрнН', 'рмЬрнН', 'рмЭрнН', 'рмЮрнН', 'рмЯрнН', 'рмарнН', 'рмбрнН', 'рмврнН', 'рмгрнН', 'рмдрнН', 'рмернН', 'рмжрнН', 'рмзрнН', 'рмирнН', 'рмкрнН', 'рмлрнН', 'рммрнН', 'рмнрнН', 'рморнН', 'рмпрнН', 'рнЯрнН', 'рм░рнН', 'рм│рнН', 'рм▓рнН', 'рн▒рнН', 'рм╢рнН', 'рм╖рнН', 'рм╕рнН', 'рм╣рнН']
]
var vowelLetters = vowelLetterLangs[currentLang];
var vowelSigns = vowelSignLangs[currentLang];
var consonants = consonantLangs[currentLang];
var consonant = consonants[0];
var vowelLetter = vowelLetters[0];
var vowelSign;

var width = window.innerWidth;
var height = window.innerHeight;

Konva.angleDeg = false;
var angularVelocity = 6;
var angularVelocities = [];
var lastRotation = 0;
var controlled = false;
var numWedges = vowelLetters.length;
var angularFriction = 0.2;
var target, activeWedge, stage, layer, wheel, pointer;
var finished = false;

function getAverageAngularVelocity() {
  var total = 0;
  var len = angularVelocities.length;

  if (len === 0) {
    return 0;
  }

  for (var n = 0; n < len; n++) {
    total += angularVelocities[n];
  }

  return total / len;
}
function purifyColor(color) {
  var randIndex = Math.round(Math.random() * 3);
  color[randIndex] = 0;
  return color;
}
function getRandomColor() {
  var r = 100 + Math.round(Math.random() * 55);
  var g = 100 + Math.round(Math.random() * 55);
  var b = 100 + Math.round(Math.random() * 55);
  return purifyColor([r, g, b]);
}

function getIndexedvowelLetter(n) {
  var mainDigit = vowelLetters[n];
  return mainDigit;
}

function addButton(n) {
  var nextLine = n / 18 > 1 ? 1 : 0;
  var buttonX = nextLine ? stage.width() / 6 + (n - 18) * 80 + 20 : stage.width() / 6 + n * 80 + 20;
  var buttonY = 410 * 2 + 20 + nextLine * 40;
  var button = new Konva.Label({
    x: buttonX,
    y: buttonY,
    opacity: 0.75
  });
  layer.add(button);

  button.add(new Konva.Tag({
    fill: 'black',
    lineJoin: 'round',
    shadowColor: 'black',
    shadowBlur: 10,
    shadowOffset: 10,
    shadowOpacity: 0.5
  }));

  button.add(new Konva.Text({
    text: consonants[n],
    fontFamily: 'Calibri',
    fontSize: 18,
    padding: 5,
    fill: 'white'
  }));
  button.on('click', () => {
    consonant = consonants[n];
    alert('selected consonant : ' + consonant);
  })
}

function addWedge(n) {
  var s = getRandomColor();
  var reward = getIndexedvowelLetter(n);
  var r = s[0];
  var g = s[1];
  var b = s[2];
  var angle = (2 * Math.PI) / numWedges;

  var endColor = "rgb(" + r + "," + g + "," + b + ")";
  r += 100;
  g += 100;
  b += 100;

  var startColor = "rgb(" + r + "," + g + "," + b + ")";

  var wedge = new Konva.Group({
    rotation: (2 * n * Math.PI) / numWedges,
  });

  var wedgeBackground = new Konva.Wedge({
    radius: 300,
    angle: angle,
    fillRadialGradientStartPoint: 0,
    fillRadialGradientStartRadius: 0,
    fillRadialGradientEndPoint: 0,
    fillRadialGradientEndRadius: 300,
    fillRadialGradientColorStops: [0, startColor, 1, endColor],
    fill: "#64e9f8",
    fillPriority: "radial-gradient",
    stroke: "#ccc",
    strokeWidth: 2,
  });

  var wedgeBorderBackground = new Konva.Wedge({
    radius: 400,
    angle: angle,
    fillRadialGradientStartPoint: 300,
    fillRadialGradientStartRadius: 300,
    fillRadialGradientEndPoint: 300,
    fillRadialGradientEndRadius: 400,
    fillRadialGradientColorStops: [0, '#ffffff', 1, '#000000'],
    fill: "#ffe9f8",
    fillPriority: "radial-gradient",
    stroke: "#ccc",
    strokeWidth: 2,
  });

  wedge.add(wedgeBorderBackground);

  wedge.add(wedgeBackground);

  var text = new Konva.Text({
    text: reward,
    fontFamily: "Calibri",
    fontSize: 50,
    fill: "white",
    align: "center",
    stroke: "yellow",
    strokeWidth: 1,
    rotation: (Math.PI + angle) / 2,
    x: 390,
    y: 50,
    listening: false,
  });

  wedge.add(text);
  text.cache();

  wedge.startRotation = wedge.rotation();

  wheel.add(wedge);
}
function animate(frame) {
  // handle wheel spin
  var angularVelocityChange =
    (angularVelocity * frame.timeDiff * (1 - angularFriction)) / 1000;
  angularVelocity -= angularVelocityChange;

  // activate / deactivate wedges based on point intersection
  var shape = stage.getIntersection({
    x: stage.width() / 2,
    y: 100,
  });

  if (controlled) {
    if (angularVelocities.length > 10) {
      angularVelocities.shift();
    }

    angularVelocities.push(
      ((wheel.rotation() - lastRotation) * 1000) / frame.timeDiff
    );
  } else {
    var diff = (frame.timeDiff * angularVelocity) / 1000;
    if (diff > 0.0001) {
      wheel.rotate(diff);
    } else if (!finished && !controlled) {
      if (shape) {
        var text = shape.getParent().findOne("Text").text();
        var price = text.split("\n").join("");
        vowelLetter = price;
        vowelSign = vowelSigns[vowelLetters.indexOf(vowelLetter)];

        alert(consonant + " + " + vowelLetter + " = " + consonant + vowelSign)
      }
      finished = true;
    }
  }
  lastRotation = wheel.rotation();

  if (shape) {
    if (shape && (!activeWedge || shape._id !== activeWedge._id)) {
      pointer.y(20);

      new Konva.Tween({
        node: pointer,
        duration: 0.3,
        y: 30,
        easing: Konva.Easings.ElasticEaseOut,
      }).play();

      if (activeWedge) {
        activeWedge.fillPriority("radial-gradient");
      }
      shape.fillPriority("fill");
      activeWedge = shape;
    }
  }
}
function init() {
  stage = new Konva.Stage({
    container: "container",
    width: width,
    height: height,
  });
  layer = new Konva.Layer();
  wheel = new Konva.Group({
    x: stage.width() / 2,
    y: stage.height() / 2 - 50,
  });
  for (var n = 0; n < consonants.length; n++) {
    addButton(n);
  }
  for (var n = 0; n < numWedges; n++) {
    addWedge(n);
  }
  pointer = new Konva.Wedge({
    fillRadialGradientStartPoint: 0,
    fillRadialGradientStartRadius: 0,
    fillRadialGradientEndPoint: 0,
    fillRadialGradientEndRadius: 30,
    fillRadialGradientColorStops: [0, "white", 1, "red"],
    stroke: "white",
    strokeWidth: 2,
    lineJoin: "round",
    angle: 1,
    radius: 30,
    x: stage.width() / 2,
    y: 33,
    rotation: -90,
    shadowColor: "black",
    shadowOffsetX: 3,
    shadowOffsetY: 3,
    shadowBlur: 2,
    shadowOpacity: 0.5,
  });

  // add components to the stage
  layer.add(wheel);
  layer.add(pointer);
  stage.add(layer);

  // bind events
  wheel.on("mousedown touchstart", function (evt) {
    angularVelocity = 0;
    controlled = true;
    target = evt.target;
    finished = false;
  });
  // add listeners to container
  stage.addEventListener(
    "mouseup touchend",
    function () {
      controlled = false;
      angularVelocity = getAverageAngularVelocity() * 5;

      if (angularVelocity > 20) {
        angularVelocity = 20;
      } else if (angularVelocity < -20) {
        angularVelocity = -20;
      }

      angularVelocities = [];
    },
    false
  );

  stage.addEventListener(
    "mousemove touchmove",
    function (evt) {
      var mousePos = stage.getPointerPosition();
      if (controlled && mousePos && target) {
        var x = mousePos.x - wheel.getX();
        var y = mousePos.y - wheel.getY();
        var atan = Math.atan(y / x);
        var rotation = x >= 0 ? atan : atan + Math.PI;
        var targetGroup = target.getParent();

        wheel.rotation(
          rotation - targetGroup.startRotation - target.angle() / 2
        );
      }
    },
    false
  );

  var anim = new Konva.Animation(animate, layer);

  // wait one second and then spin the wheel
  setTimeout(function () {
    anim.start();
  }, 1000);
}
